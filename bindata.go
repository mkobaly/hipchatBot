// Code generated by go-bindata.
// sources:
// templates/help.html
// templates/kick.html
// templates/list.html
// templates/status.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHelpHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\xbd\x6e\xeb\x30\x0c\x46\xf7\x00\x79\x07\x22\xd3\xbd\x43\xa0\x3d\x55\x35\xa4\x43\x1b\xb4\x63\xfb\x00\xfa\xa1\x1d\xc1\xb4\x18\x88\x14\xd0\xbc\x7d\xe1\xd8\x41\xd0\x36\xe8\x20\x0d\xe2\xe1\xf9\x44\x5a\x39\xf9\x02\xa2\x67\xc2\xc7\x4d\x64\xe2\xba\x4b\xbe\x0e\x7b\x6a\xf8\xa0\xf8\xa9\xdb\x84\x91\xab\xd7\xcc\x65\xd7\x4a\xc2\x4a\xb9\xe0\xc6\x59\xd1\xca\xa5\x77\xef\xe8\xc7\x98\xf5\x0c\xfb\x96\x29\xc1\x9e\x15\x5e\x90\x4e\x36\x54\x77\x39\x66\xe1\xac\x99\x72\xdc\x7a\xb5\x5e\xfd\x91\xb8\x71\x16\x47\xf7\x21\xbe\x47\x6b\x70\xbc\x75\xd9\x46\xd3\x4d\xd9\xd9\xe0\x4c\xb8\x64\x51\x16\xb5\x26\x38\xf8\xf7\x96\x45\x81\x9b\x82\x27\x82\xb9\x18\xb9\x74\xb9\x6f\xf3\xc7\xe5\xbf\x35\x94\x7f\x09\x86\x1c\x87\x19\x7f\xba\xd0\x87\x04\xa1\xfa\x12\x8f\xb3\xf5\x75\x2a\x73\xd7\x2d\xc6\x8e\xeb\x0f\xb8\x49\x2e\xfd\xd2\x72\x3f\x41\xd4\x6b\x13\x50\x2f\xc3\x21\xcd\xd6\x67\xd4\xeb\x33\x5f\xd5\x15\xa5\x91\x42\x38\x2f\xe4\x7d\xd9\x76\x7b\x9c\x36\x7b\x9b\x38\xf2\x38\xfa\x92\x80\x4f\xdf\x87\x34\x8d\xdc\x57\x00\x00\x00\xff\xff\xfc\xf6\x2a\x46\xd7\x01\x00\x00")

func templatesHelpHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHelpHtml,
		"templates/help.html",
	)
}

func templatesHelpHtml() (*asset, error) {
	bytes, err := templatesHelpHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/help.html", size: 471, mode: os.FileMode(438), modTime: time.Unix(1500570133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesKickHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\x3d\x6f\xf3\x30\x0c\x84\xf7\x00\xf9\x0f\x84\xf7\x37\xda\xf3\xaa\x1a\xd2\x2e\xdd\xbb\x74\xd4\x07\x65\x0b\x92\xc9\x42\x1f\x68\x0d\x23\xff\xbd\xb0\x2d\x20\xc8\xd0\x41\x03\x71\x77\x8f\xc8\x93\xe5\x4b\x13\x94\xba\x24\x7c\x19\x2c\x27\xce\x57\xa7\x73\xbc\xa5\x86\xff\x2b\xfe\xd4\x7f\x0e\x2d\x67\x5d\x03\xd3\xb5\x91\xc3\x9c\x02\xe1\xa0\x64\xa9\x99\x69\x54\xb7\x16\x92\x83\x18\x6c\x44\x07\xec\xbd\x14\x5d\x90\x62\x03\xab\xf3\x49\x9a\xac\xb6\x77\x3e\x49\x9c\x95\x34\x3d\xf2\xca\xe4\xc3\xd8\x3a\x19\xa4\x30\x6a\x5d\x2f\xbb\x76\x48\xef\x6f\xf7\xbb\x14\x38\x77\xc4\x23\x9e\x35\xd9\xe9\x91\xd8\xc7\x27\xeb\x61\xff\xe4\x06\x56\x13\xd8\x09\x6d\x04\x26\xa8\x13\x42\xa9\xba\xb6\x02\xec\x61\xe1\x96\xc1\xec\xab\x98\x05\x72\x23\x0a\x34\xee\x1e\xcf\x29\xf1\xf7\x36\x59\x9e\x67\x4d\xee\xe9\x86\xbf\xeb\x1a\x94\x38\x78\xfd\x93\x75\xbd\x7c\xe8\x12\x8f\x3b\x7a\x19\xbf\x01\x00\x00\xff\xff\x7d\x79\x45\x5c\x6e\x01\x00\x00")

func templatesKickHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesKickHtml,
		"templates/kick.html",
	)
}

func templatesKickHtml() (*asset, error) {
	bytes, err := templatesKickHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/kick.html", size: 366, mode: os.FileMode(438), modTime: time.Unix(1500571843, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesListHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2c\xcd\x4d\x4a\xc4\x40\x10\xc5\xf1\x7d\x20\x77\x28\x86\x59\xaa\xbd\x8f\x35\x0d\x8e\x57\xf0\x02\x35\xe9\x32\x14\x29\xab\xa5\x3f\x82\xa1\xe9\xbb\x4b\x8c\xdb\xc7\xfb\xf1\xc7\xfc\x4d\x06\xb9\xec\xca\xb7\xcb\x1c\x35\xa6\x29\x50\x5a\xef\x5a\xf9\xb5\xf0\x4f\x79\x0e\x3c\xc7\x44\x45\xa2\x4d\xd5\x02\x27\x15\xe3\x8b\xc7\x5c\x52\xb4\xc5\x7f\x30\x7d\xcd\x52\x76\x78\xdb\x48\x94\x1e\xca\x70\xaf\xa2\x01\xde\xa3\x7d\xca\x52\x4f\x99\xf1\x91\x3c\xba\x7f\x83\xee\x68\xfa\x71\xc0\xaa\x7e\x1c\x5a\x4b\x64\x0b\xc3\x75\xe5\xfd\x09\xae\x1b\x69\x65\x98\x6e\xf0\xd2\xfb\x38\x00\x00\xaa\xf8\xd6\xce\xbd\x77\x74\x2a\x7f\x88\x2d\x1c\x07\x74\x55\xfd\x6f\x00\x00\x00\xff\xff\x4f\x82\xfe\x5f\xc5\x00\x00\x00")

func templatesListHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesListHtml,
		"templates/list.html",
	)
}

func templatesListHtml() (*asset, error) {
	bytes, err := templatesListHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/list.html", size: 197, mode: os.FileMode(438), modTime: time.Unix(1500567552, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesStatusHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\xce\xb1\x0e\x82\x30\x10\x06\xe0\x9d\x84\x77\x68\xd8\xb5\x3b\x9e\x1d\xd0\xc5\xc5\x41\x7d\x81\x42\x4f\x6c\x2c\x2d\x69\xaf\x89\x84\xf0\xee\x06\x24\x12\x12\x1d\x3a\xfc\xbd\xef\xbf\x1c\x84\x56\x5a\x16\xa8\x33\xb8\xcf\x2a\x67\x9c\xcf\x95\xf4\xcf\xc2\x44\xdc\x11\xbe\x68\xa3\xb0\x72\x5e\x92\x76\x36\x8f\x56\xa1\x37\xda\x62\x26\x20\x90\x77\xb6\x16\x45\xd4\x46\xb1\x0b\x86\x68\x88\x5d\x49\x52\x0c\xc0\xe7\x19\xf0\x71\xb7\x48\x13\x28\xbd\x18\x5f\x9a\x00\x36\x02\xca\xb9\x75\x70\xf6\xae\xeb\x9c\x01\x2f\x45\xdf\x6f\xa7\xcf\x5b\xd7\xe2\xe9\x38\x0c\xc0\xb1\x99\x9b\x4b\xcb\x4b\x5b\x3d\x16\x3f\xc5\xb3\x6c\xf0\x37\x1f\xaf\xc1\xaf\x9e\xd2\x7f\x18\xc3\x4a\xc6\xb0\xa2\x1f\x9e\x26\xef\x00\x00\x00\xff\xff\x6a\x7d\x48\x40\x2d\x01\x00\x00")

func templatesStatusHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesStatusHtml,
		"templates/status.html",
	)
}

func templatesStatusHtml() (*asset, error) {
	bytes, err := templatesStatusHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/status.html", size: 301, mode: os.FileMode(438), modTime: time.Unix(1500573691, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/help.html": templatesHelpHtml,
	"templates/kick.html": templatesKickHtml,
	"templates/list.html": templatesListHtml,
	"templates/status.html": templatesStatusHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"help.html": &bintree{templatesHelpHtml, map[string]*bintree{}},
		"kick.html": &bintree{templatesKickHtml, map[string]*bintree{}},
		"list.html": &bintree{templatesListHtml, map[string]*bintree{}},
		"status.html": &bintree{templatesStatusHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

